{"version":3,"sources":["../server.js"],"names":["normalizePort","port","parseInt","val","isNaN","process","env","PORT","app","set","errorHandler","error","syscall","address","server","bind","code","console","exit","on","log","listen"],"mappings":";;AAAA;;AACA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,MAAO;AAC3B,MAAMC,OAAOC,SAASC,GAAT,EAAc,EAAd,CAAb;;AAEA,MAAIC,MAAMH,IAAN,CAAJ,EAAiB;AACf,WAAOE,GAAP;AACD;AACD,MAAIF,QAAQ,CAAZ,EAAe;AACb,WAAOA,IAAP;AACD;AACD,SAAO,KAAP;AACD,CAVD;AAWA,IAAMA,OAAOD,cAAcK,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAb;AACAC,cAAIC,GAAJ,CAAQ,MAAR,EAAgBR,IAAhB;;AAEA,IAAMS,eAAe,SAAfA,YAAe,QAAS;AAC5B,MAAIC,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;AACD,MAAME,UAAUC,OAAOD,OAAP,EAAhB;AACA,MAAME,OAAO,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,UAAUA,OAAxC,GAAkD,WAAWZ,IAA1E;AACA,UAAQU,MAAMK,IAAd;AACE,SAAK,QAAL;AACEC,cAAQN,KAAR,CAAcI,OAAO,gCAArB;AACAV,cAAQa,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQN,KAAR,CAAcI,OAAO,qBAArB;AACAV,cAAQa,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMP,KAAN;AAVJ;AAYD,CAlBD;;AAoBA,IAAMG,SAAS,wBAAaN,aAAb,CAAf;;AAEAM,OAAOK,EAAP,CAAU,OAAV,EAAmBT,YAAnB;AACAI,OAAOK,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC3B,MAAMN,UAAUC,OAAOD,OAAP,EAAhB;AACA,MAAME,OAAO,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,UAAUA,OAAxC,GAAkD,UAAUZ,IAAzE;AACAgB,UAAQG,GAAR,CAAY,kBAAkBL,IAA9B;AACD,CAJD;;AAMAD,OAAOO,MAAP,CAAcpB,IAAd","file":"server.js","sourcesContent":["import { createServer } from 'http';\r\nimport app from './../app';\r\n\r\nconst normalizePort = val => {\r\n  const port = parseInt(val, 10);\r\n\r\n  if (isNaN(port)) {\r\n    return val;\r\n  }\r\n  if (port >= 0) {\r\n    return port;\r\n  }\r\n  return false;\r\n};\r\nconst port = normalizePort(process.env.PORT ||Â '3000');\r\napp.set('port', port);\r\n\r\nconst errorHandler = error => {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n  const address = server.address();\r\n  const bind = typeof address === 'string' ? 'pipe ' + address : 'port: ' + port;\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges.');\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use.');\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n};\r\n\r\nconst server = createServer(app);\r\n\r\nserver.on('error', errorHandler);\r\nserver.on('listening', () => {\r\n  const address = server.address();\r\n  const bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + port;\r\n  console.log('Listening on ' + bind);\r\n});\r\n\r\nserver.listen(port);\r\n"]}